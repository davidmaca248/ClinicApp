<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:properties="clr-namespace:ClinicApp.Properties"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:converters="clr-namespace:ClinicApp.Common.ValueConverters">

    <SolidColorBrush x:Key="PrimaryColour" Color="DarkOrchid"/>
    <SolidColorBrush x:Key="SecondaryColour" Color="Orchid"/>
    <converters:AppointmentRowTimeValueConverter x:Key="appointmentRowConverter"/>

    <Style BasedOn="{StaticResource {x:Type ToggleButton}}"
           x:Key="NavbarButtonStyle" TargetType="{x:Type RadioButton}">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              CornerRadius="30"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource PrimaryColour}"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="{StaticResource PrimaryColour}"/>
            </Trigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="{StaticResource PrimaryColour}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="20"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orchid"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="Gray"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="20"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#A9A9A9"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RescheduleButtonStyle" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="#A7C7E7"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="20"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#A9A9A9"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AppointmentTypeStyle" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="{StaticResource PrimaryColour}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="20"
                                BorderBrush="DarkOrchid"
                                BorderThickness="4"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orchid"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--Temporary Non-selected Page button-->
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}"
           x:Key="AppointmentPageUnselected" TargetType="{x:Type RadioButton}">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              CornerRadius="30"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="DarkOrchid"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="{StaticResource SecondaryColour}"/>
            </Trigger>
        </Style.Triggers>

    </Style>


    <!--Appointment Page Select-->
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}"
           x:Key="AppointmentPageSelect" TargetType="{x:Type RadioButton}">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              CornerRadius="30"
                                BorderThickness="5"
                                BorderBrush="DarkOrchid"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="{StaticResource PrimaryColour}"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="{StaticResource SecondaryColour}"/>
            </Trigger>
        </Style.Triggers>

    </Style>


    <!--Appointment Booking Button-->
    <Style x:Key="AppointmentBookingButton" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="DarkOrchid"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="60"
                                BorderThickness="0"
                                BorderBrush="DarkOrchid"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="48"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orchid"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PrevNextButton" TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Background" Value="{StaticResource PrimaryColour}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="20"
                                Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{StaticResource StandardFont}"
                                       FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=DefaultFontSize}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Orchid"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--Datagrid Style-->
    <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Height="50">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                        <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FF688CAF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="DataGridColumnHeaderStyle1" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="DarkOrchid"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardFont}"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder Background="{TemplateBinding Background}" 
                                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                                    IsPressed="{TemplateBinding IsPressed}" 
                                                    IsHovered="{TemplateBinding IsMouseOver}" 
                                                    IsClickable="{TemplateBinding CanUserSort}" 
                                                    Padding="{TemplateBinding Padding}" 
                                                    SortDirection="{TemplateBinding SortDirection}" 
                                                    SeparatorVisibility="{TemplateBinding SeparatorVisibility}" 
                                                    SeparatorBrush="{TemplateBinding SeparatorBrush}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </theme:DataGridHeaderBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>